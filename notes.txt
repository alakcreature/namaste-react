Here React.createElement() is just a object which will be turned to html tag by the render method by creating a tree in the dom.
ReactElement(Object) => HTML(Browser Understands)
Whenever we pass root.render, the contents in div.#root will be replaced by that.
We can use react in uor existing project because it wil only affect only the root html tag. That's why its a library not a framework.

Bundler: It packages our app properly so that it could be shipped to production such as webpack, parcel or vite.

dependencies & dev-dependencies

package-lock.json: It keeps the track of all the versions of all dependencies.

To install a package we use 'npm' and to use any package we use 'npx'.

- if we want to remove console.log(*) calls from our production build files, use babel-plugin-transform-remove-console package


- JSX: React came up with a philosophy that we have to update html using javascript. It is HTML like syntax but not HTML syntax.





Ep-5

- one way data binding: that's why input tag is controlled by react and we must use usetstate to handle it properly. one reason for this is to let other component
  & the same component know when input value is changing.
- two way binding: using usestate 
- Hooks are normal function
- useState hook is used to create a local state variable
- Why usestate is used?: to provide react about every local state variable so that it knows where to update the dom.





EP-6

- conditional rendering
- diff algorithm is a part of core react.
- updating the dom is done by react dom 



EP - 7

- Never create a new component inside a component because every time AppLayout renders then a component will be created	every time
- Never write usestate & useeffect inside if else block or inside for loop
- React router dom & configured createBrowserRouter
- Dynamic Router




EP - 8
-nested routes = parentPath/{path} => localhost:1234/about/profile  = path:"profile" 
- class based components
  - We cannot render anything without render method
  - Render method return some jsx
  - React will attach all the props to class (this)
  - why do we call super in class based components?
  - why can't we make useeffect callback function async?
  - constructor is a place where we initialization of state variables takes place
  - We do not mutate state directly, because react will have to know when to re-render the app. It keeps UI in sync.
  - Lifecycle Methods
    - constructor
    - render
    - componentDidMount
    - componentDidUpdate
    - componentWillUnmount
- React first renders all the child components, then start commit phase for all child components (while updating in the actual dom)
  - All constructor and render methods are part of render phase & componentDidMount, componentDidUpdate, componentWillUnmount are a part of commit phase in which
    actual DOM gets updated.
- When we use async in front of componentDidMount, then it will delay the componentDidMount to run and it will go ahead with Parent - componentDidMount to run. 
- Whenever we change the page via route, then we need to clear somethings in that component






EP - 9

- Modularity makes our code readable, maintainable, testable.
- Chinking / Code Splitting / Lazy Loading / Dynamic Bundling / On Demand Loading / Dynamic Importing
- When we lazy load the component on demand, react suspends the rendering
- Never load any component dynamically inside any other component because it will lazy load after every render cycle









EP - 10

- Bundle size will increase drastically if we use any design library
- We lose control over the design
- Pros & Cons of using component libraries?
- Tailwind CSS Framework
        - CSS on the go
        - reusability
        - less bundle size









EP - 11

- Props Drilling: when we pass props from parent to child component hierarchically.
  - 
- We can debug our web app by using react dev tools without writing console.log everywhere.
  - Profiler: shows how our web app was loaded, how much time it took to load
  - To make our web app optimized, we track everything by Profiler  
- We lifted the state up from child to parent so that we can control it from parent component.
- React Context is so fast that it updates the ui everywhere (reconciliation happens everywhere).







EP-12

- When we have less complex application, then Context is a right choice but as our application grows then redux should be used because along the line,
  we will have many contexts for many different components but redux allows ...
- Disadvantage of redux:
  - very complex to setup
- Architecture:
  - redux is global state variable for the whole application.
  - redux store is a object.
  - we will create slices of our store such as user, cart, restaurant etc.
  - we cannot directly modify the cart slice, we do this by dispatching an action and it calls a function & then it will modify the slice of the store.
  - This function is known as the reducer.
  - To read the slice of the store, we need selector to read that.
  - Always subscribe to the portion of store what we want in a component, otherwise it will create a performance issue.
  

- Flow:
  + -> dispatches(action) -> reducer -> updates the store(slice) -> selector (cart component subscribed to the store) -> updates the ui

- Boilerplate:
  - configureStore from redux-toolkit
    - reducer: {...all slices} (all the reducers will come in one reducer)
  - Provider from react-redux
  - createSlice from RTK -> initialState, reducers (action name & reducer function which will eventually updates the initialState)
    - name
    - initialState
    - reducers :{
      functions (do not return anything from this)
    }
    export const {functions in reducers} = cartSlice.actions;
    export default cartSlice.reducer;
  - useSelector() from react-redux to use portion state
  - useDispatch() from react-redux to dispatch an action.
